//CHECKSUM:56554ce476f0c1654600cec0979eba4ce544ec62eca9522ecc4250ef6f29157b
{"version":3,"sources":["../hooks/after_server_start/.expose_private_api.js"],"names":["_","require","secret","process","env","EXPOSED_PRIVATE_API_SECRET","privateAuthentication","req","res","next","auth","get","toLowerCase","parts","split","filter","x","length","sendStatus","exposeApi","bp","logger","warn","router","http","createRouterForBot","checkAuthentication","use","reference","params","signature","security","getMessageSignature","send","full","err","attachError","error","apiUrl","getPublicPath","replace","info"],"mappings":"AAAA;;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,0BAA3B;;AAEA,MAAMC,qBAAqB,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAChD,QAAMC,IAAI,GAAGV,CAAC,CAACW,GAAF,CAAMJ,GAAN,EAAW,uBAAX,EAAoC,EAApC,EAAwCK,WAAxC,EAAb;;AACA,QAAMC,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuBC,CAAC,IAAIA,CAAC,CAACC,MAA9B,CAAd;;AACA,MAAIJ,KAAK,CAACI,MAAN,KAAiB,CAAjB,IAAsBJ,KAAK,CAAC,CAAD,CAAL,KAAa,QAAnC,IAA+CA,KAAK,CAAC,CAAD,CAAL,KAAaX,MAAhE,EAAwE;AACtE,WAAOM,GAAG,CAACU,UAAJ,CAAe,GAAf,CAAP,CADsE,CAC3C;AAC5B;;AACDT,EAAAA,IAAI;AACL,CAPD;AASA;;;;;;;AAKA,MAAMU,SAAS,GAAG,YAAY;AAC5B,MAAI,CAACjB,MAAD,IAAW,CAACA,MAAM,CAACe,MAAvB,EAA+B;AAC7B,WAAOG,EAAE,CAACC,MAAH,CAAUC,IAAV,CACL,mHADK,CAAP;AAGD;;AAED,QAAMC,MAAM,GAAGH,EAAE,CAACI,IAAH,CAAQC,kBAAR,CAA2B,aAA3B,EAA0C;AACvDC,IAAAA,mBAAmB,EAAE;AADkC,GAA1C,CAAf;AAIAH,EAAAA,MAAM,CAACI,GAAP,CAAWrB,qBAAX;AAEA;;;;;;;;AAOAiB,EAAAA,MAAM,CAACZ,GAAP,CAAW,4BAAX,EAAyC,OAAOJ,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AACjE,QAAI;AACF,YAAMmB,SAAS,GAAGrB,GAAG,CAACsB,MAAJ,CAAWD,SAA7B;AACA,YAAME,SAAS,GAAG,MAAMV,EAAE,CAACW,QAAH,CAAYC,mBAAZ,CAAgCzB,GAAG,CAACsB,MAAJ,CAAWD,SAA3C,CAAxB;AACApB,MAAAA,GAAG,CAACyB,IAAJ,CAAS;AAAEL,QAAAA,SAAF;AAAaE,QAAAA,SAAb;AAAwBI,QAAAA,IAAI,EAAG,GAAEN,SAAU,IAAGE,SAAU;AAAxD,OAAT;AACD,KAJD,CAIE,OAAOK,GAAP,EAAY;AACZf,MAAAA,EAAE,CAACC,MAAH,CAAUe,WAAV,CAAsBD,GAAtB,EAA2BE,KAA3B,CAAiC,4BAAjC;AACA7B,MAAAA,GAAG,CAACyB,IAAJ,CAAS,GAAT;AACD;AACF,GATD;AAWA,MAAIK,MAAM,GAAG,MAAMf,MAAM,CAACgB,aAAP,EAAnB;AACAD,EAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,QAAf,EAAyB,KAAzB,CAAT;AACApB,EAAAA,EAAE,CAACC,MAAH,CAAUoB,IAAV,CAAgB,uBAAsBH,MAAO,EAA7C;AACD,CAlCD;;AAoCA,OAAOnB,SAAS,EAAhB","sourceRoot":"/var/lib/jenkins/workspace/build-linux/modules/builtin/src/backend","sourcesContent":["'use strict'\n\nconst _ = require('lodash')\n\nconst secret = process.env.EXPOSED_PRIVATE_API_SECRET\n\nconst privateAuthentication = (req, res, next) => {\n  const auth = _.get(req, 'headers.authorization', '').toLowerCase()\n  const parts = auth.split(' ').filter(x => x.length)\n  if (parts.length !== 2 || parts[0] !== 'bearer' || parts[1] !== secret) {\n    return res.sendStatus(403) // Unauthorized\n  }\n  next()\n}\n\n/**\n * This hook will create a private API (secured with a custom secret)\n * You must authenticate with your token to access this API\n * HTTP headers must include: `authorization: bearer YOUR_SECRET_HERE`\n */\nconst exposeApi = async () => {\n  if (!secret || !secret.length) {\n    return bp.logger.warn(\n      'Custom API disabled because you did not provide an API secret (set the \"EXPOSED_PRIVATE_API_SECRET\" env variable)'\n    )\n  }\n\n  const router = bp.http.createRouterForBot('private-api', {\n    checkAuthentication: false\n  })\n\n  router.use(privateAuthentication)\n\n  /*\n    This route exposes a route to create trusted chat references for your webchat visitors\n    There are three ways you can use the generated signature:\n    1. Standalone Webchat: Append the reference to the URL of the chat, e.g. http://<bot_url>/s/your_bot?ref=[reference]=[signature]\n    2. Embedded Webchat: Add the `ref` to the webchat init options. e.g. `{ ref: '[reference]=[signature]', host: ... }`\n    3. Send a custom Incoming Event (using the SDK), see the built-in hook \"after_incoming_middleware/02_set_session_reference.js\"\n  */\n  router.get('/chat-reference/:reference', async (req, res, next) => {\n    try {\n      const reference = req.params.reference\n      const signature = await bp.security.getMessageSignature(req.params.reference)\n      res.send({ reference, signature, full: `${reference}=${signature}` })\n    } catch (err) {\n      bp.logger.attachError(err).error('Error generating signature')\n      res.send(500)\n    }\n  })\n\n  let apiUrl = await router.getPublicPath()\n  apiUrl = apiUrl.replace('BOT_ID', '___')\n  bp.logger.info(`Private API Path is ${apiUrl}`)\n}\n\nreturn exposeApi()\n"]}